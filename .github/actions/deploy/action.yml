name: deploy
description: Deploys frontend and backend to AWS.


inputs:
  frontend-artifact-path:
    description: "Path to the frontend artifact"
    default: 'frontend/public'
    required: false
    type: string
  backend-artifact-path:
    description: "Path to the frontend artifact"
    default: 'backend/lambda.zip'
    required: false
    type: string
  aws-resource-name:
    description: "Resource name to use for the deployment"
    required: true
    type: string
  aws-cloudfront-id:
    description: "Cloudfront distribution ID to refresh"
    required: true
    type: string


runs:
  using: composite
  steps:

    # --- frontend -------------------------
    - id: check-frontend
      shell: bash
      run: ls ${{ inputs.frontend-artifact-path }} > /dev/null

    - name: upload frontend artifact
      if: steps.check-frontend.outcome == 'success'
      shell: bash
      run: |
        echo aws s3 sync --delete 
          "${{ inputs.frontend-artifact-path }}"
          "s3://codeforpoznan-public/${{ inputs.aws-resource-name }}"

    - name: refresh frontend CDN
      if: steps.check-frontend.outcome == 'success'
      shell: bash
      run: |
        echo aws cloudfront create-invalidation
          --paths "/+"
          --distribution-id "${{ inputs.aws-cloudfront-id }}"


    # --- backend -------------------------
    - id: check-backend
      shell: bash
      run: ls ${{ inputs.backend-artifact-path }} > /dev/null

    - name: upload backend artifact
      if: steps.check-backend.outcome == 'success'
      shell: bash
      run: |
        echo aws s3 cp 
          "${{ inputs.backend-artifact-path }}"
          "s3://codeforpoznan-lambdas/${{ inputs.aws-resource-name }}_serverless_api.zip"

        echo aws s3 cp
          "${{ inputs.backend-artifact-path }}"
          "s3://codeforpoznan-lambdas/${{ inputs.aws-resource-name }}_migration.zip"

    - name: refresh backend lambdas
      if: steps.check-backend.outcome == 'success'
      shell: bash
      run: |
        echo aws lambda update-function-code
          --s3-bucket     "codeforpoznan-lambdas"
          --s3-key        "${{ env.aws-resource-name }}_serverless_api.zip"
          --function-name "${{ env.aws-resource-name }}_serverless_api"
#        | jq 'del(.Environment, .VpcConfig, .Role, .FunctionArn)'

        echo aws lambda update-function-code
          --s3-bucket     "codeforpoznan-lambdas"
          --s3-key        "${{ env.aws-resource-name }}_migration.zip"
          --function-name "${{ env.aws-resource-name }}_migration"
#        | jq 'del(.Environment, .VpcConfig, .Role, .FunctionArn)'

    - name: run backend migration lambda
      if: steps.check-backend.outcome == 'success'
      shell: bash
      run: |
        echo aws lambda invoke
          --function-name "${uuuRESOURCE}_migration"
          response.json
#        > request.json

    # - name: show backend migration lambda output
    #   if: steps.check-backend.outcome == 'success'
    #   shell: bash
    #   run: |
    #     jq -s add ./*.json
    #     | jq -re '
    #       if .FunctionError then
    #         .FunctionError, .errorMessage, false
    #       else
    #         .stdout, .stderr
    #       end
    #     '
