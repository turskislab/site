name: deploy
description: Deploys frontend and backend to AWS.


inputs:
  frontend-artifact-path:
    description: "Path to the frontend artifact"
    default: 'artifacts/frontend/'
    required: false
    type: string
  backend-artifact-path:
    description: "Path to the frontend artifact"
    default: 'artifacts/backend/lambda.zip'
    required: false
    type: string
  aws-resource-name:
    description: "Resource name to use for the deployment"
    required: true
    type: string
  aws-cloudfront-id:
    description: "Cloudfront distribution ID to refresh"
    required: true
    type: string


runs:
  using: composite
  steps:

    - shell: bash
      run: ls -R

    # --- frontend
    - name: frontend / upload artifact
      shell: bash
      run: >
        echo aws s3 sync --delete
        "${{ inputs.frontend-artifact-path }}"
        "s3://codeforpoznan-public/${{ inputs.aws-resource-name }}"

    - name: frontend / refresh CDN
      shell: bash
      run: >
        echo aws cloudfront create-invalidation
        --paths "/+"
        --distribution-id "${{ inputs.aws-cloudfront-id }}"


    # --- backend
    - name: backend / upload artifact (serverless_api)
      shell: bash
      run: >
        echo aws s3 cp
        "${{ inputs.backend-artifact-path }}"
        "s3://codeforpoznan-lambdas/${{ inputs.aws-resource-name }}_serverless_api.zip"

    - name: backend / upload artifact (migration)
      shell: bash
      run: >
        echo aws s3 cp
        "${{ inputs.backend-artifact-path }}"
        "s3://codeforpoznan-lambdas/${{ inputs.aws-resource-name }}_migration.zip"

    - name: backend / refresh lambdas (serverless_api)
      shell: bash
      run: >
        echo aws lambda update-function-code
        --s3-bucket     "codeforpoznan-lambdas"
        --s3-key        "${{ env.aws-resource-name }}_serverless_api.zip"
        --function-name "${{ env.aws-resource-name }}_serverless_api"
        | jq 'del(.Environment, .VpcConfig, .Role, .FunctionArn)'

    - name: backend / refresh lambdas (migration)
      shell: bash
      run: >
        echo aws lambda update-function-code
        --s3-bucket     "codeforpoznan-lambdas"
        --s3-key        "${{ env.aws-resource-name }}_migration.zip"
        --function-name "${{ env.aws-resource-name }}_migration"
        | jq 'del(.Environment, .VpcConfig, .Role, .FunctionArn)'

    - name: backend / run migration lambda
      shell: bash
      run: >
        echo aws lambda invoke
        --function-name "${{ inputs.aws-resource-name }}_migration"
        response.json > request.json

    - name: backend / show migration output
      shell: bash
      run: >
        jq -s add ./*.json | jq -re '
          if .FunctionError then
            .FunctionError, .errorMessage, false
          else
            .stdout, .stderr
          end
        '
