name: setup-backend
description: Sets up runner environment according to backend code needs


inputs:
  python-version:
    description: "Python version to use. Example '3.8'"
    default: '3.8'
    required: false
    type: string
  pipenv-version:
    description: "Pipenv version to use. Example '2022.1.8'"
    default: '2022.1.8'
    required: false
    type: string
  pipenv-lockfile:
    description: "Full path to pipenv lockfile. Example 'backend/Pipfile.lock'"
    default: 'backend/Pipfile.lock'
    required: false
    type: string


runs:
  using: composite
  steps:
    # configure python as specified in the input
    - uses: actions/setup-python@v2
      id: setup-python
      with:
        python-version: ${{ inputs.python-version }}
    

    # set some helpful temporary variables
    - uses: ./.github/actions/set-var
      with:
        name: "my_python"
        value: python${{ inputs.python-version }}
    
    - uses: ./.github/actions/set-var
      with:
        name: "my_cache_prefix"
        value: ${{ runner.os }}-${{ env.my_python }}
    
    - uses: ./.github/actions/set-var
      with:
        name: "my_pipenv_hash_path"
        value: ${{ format('~/.local/{0}/site-packages/pipenv/__version__.py', env.my_python) }}


    # set up cache for pipenv installation and conditionally install it
    - uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.local/${{ env.my_python }}/site-packages/pipenv
        key: ${{ env.my_cache_prefix }}-pip-${{ hashFiles(format('{0}', env.my_pipenv_hash_path)) }}
        restore-keys: ${{ env.my_cache_prefix }}-pip-

    - run: pip install pipenv=="${{ inputs.pipenv-version }}"
      if: steps.cache-pip.outputs.cache-hit == 'false'
      shell: bash


    # set up cache for dependencies and conditionally install them
    - uses: actions/cache@v2
      id: cache-pipenv
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ env.my_cache_prefix }}-pipenv-${{ hashFiles(format('{0}', inputs.python-lockfile)) }}
        restore-keys: ${{ env.my_cache_prefix }}-pipenv-

    - run: pipenv install --dev --deploy
      if: steps.cache-pipenv.outputs.cache-hit == 'false'
      shell: bash
