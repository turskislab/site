name: setup-backend
description: Sets up runner environment according to backend code needs


inputs:
  python-version:
    description: "Python version to use. Example '3.8'"
    default: '3.8'
    required: false
    type: string
  pipenv-version:
    description: "Pipenv version to use. Example '2022.1.8'"
    default: '2022.1.8'
    required: false
    type: string
  pipenv-lockfile:
    description: "Full path to pipenv lockfile. Example 'backend/Pipfile.lock'"
    default: 'backend/Pipfile.lock'
    required: false
    type: string


runs:
  using: composite
  steps:
    # configure python as specified in the input
    - uses: actions/setup-python@v2
      id: setup-python
      with:
        python-version: ${{ inputs.python-version }}


    # set some helpful temporary variables
    - uses: ./.github/actions/set-env-var
      with:
        name: my_python
        value: python${{ inputs.python-version }}

    - uses: ./.github/actions/set-env-var
      with:
        name: my_cache_prefix
        value: ${{ runner.os }}-${{ env.my_python }}

    - uses: ./.github/actions/set-env-var
      with:
        name: my_pipenv_package_path
        value: ${{ env.pythonLocation }}/lib/${{ env.my_python }}/site-packages/pipenv

    - uses: ./.github/actions/set-env-var
      with:
        name: my_pipenv_binary_path
        value: ${{ env.pythonLocation }}/bin/pipenv


    # set up cache for pipenv installation and conditionally install it
    - uses: actions/cache@v2
      id: cache-pipenv-package
      with:
        path: ${{ env.my_pipenv_package_path }}
        key: ${{ env.my_cache_prefix }}-pipenv-package-${{ inputs.pipenv-version }}
        restore-keys: ${{ env.my_cache_prefix }}-pipenv-package-

    - uses: actions/cache@v2
      id: cache-pipenv-binary
      with:
        path: ${{ env.my_pipenv_binary_path }}
        key: ${{ env.my_cache_prefix }}-pipenv-binary-${{ inputs.pipenv-version }}
        restore-keys: ${{ env.my_cache_prefix }}-pipenv-binary-

    - run: pip install pipenv=="${{ inputs.pipenv-version }}"
      working-directory: ./backend
      shell: bash
      if: >
        steps.cache-pipenv-package.outputs.cache-hit != 'true' || 
        steps.cache-pipenv-binary.outputs.cache-hit != 'true'


    # set up cache for lockfile and conditionally install dependencies
    - uses: actions/cache@v2
      id: cache-lockfile
      with:
        path: ./backend/.venv
        key: ${{ env.my_cache_prefix }}-lockfile-${{ hashFiles(format('{0}', inputs.pipenv-lockfile)) }}
        restore-keys: ${{ env.my_cache_prefix }}-lockfile-

    - run: pipenv install --dev --deploy
      if: steps.cache-lockfile.outputs.cache-hit != 'true'
      working-directory: ./backend
      shell: bash
      env:
        PIPENV_VENV_IN_PROJECT: 1
