name: setup-frontend
description: Sets up runner environment according to frontend code needs.


inputs:
  node-version:
    description: "Node.js version to use. Example '12'"
    default: '12'
    required: false
    type: string
  working-directory:
    description: "Path to the lock file. Example './frontend'"
    default: './'
    required: false
    type: string
  package-manager:
    description: "Name of the package manager to use."
  


runs:
  using: composite
  steps:
    # configure node as specified in the input
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node-version }}


    # set some helpful temporary variables
    - uses: ./.github/actions/set-env-var
      with:
        name: my_cache_prefix
        value: ${{ runner.os }}-node${{ inputs.node-version }}
    
    - uses: ./.github/actions/set-env-var
      if: contains(inputs.lockfile-path, 'yarn')
      with:
        name: my_yarn_cache_path
        command: yarn cache dir
    
    - uses: ./.github/actions/set-env-var
      if: contains(inputs.lockfile-path, 'package')
      with:
        name: my_npm_cache_path
        command: npm get cache


    # set up cache for yarn lockfile and conditionally install deps
    - uses: actions/cache@v2
      id: cache-yarn-lockfile
      if: contains(inputs.lockfile-path, 'yarn')
      with:
        path: |
          **/node_modules
          ${{ env.my_yarn_cache_path }}
        key: ${{ env.my_cache_prefix }}-yarn-lockfile-${{ hashFiles('**/yarn.lock') }}
        restore-keys: ${{ env.my_cache_prefix }}-yarn-lockfile-

    - run: yarn install --frozen-lockfile --prefer-offline --non-interactive --ignore-scripts
      if: contains(inputs.lockfile-path, 'yarn') && steps.cache-yarn-lockfile.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}


    # set up cache for npm lockfile and conditionally install deps
    - uses: actions/cache@v2
      id: cache-npm-lockfile
      if: contains(inputs.lockfile-path, 'package')
      with:
        path: |
          **/node_modules
          ${{ env.my_npm_cache_path }}
        key: ${{ env.my_cache_prefix }}-npm-lockfile-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ env.my_cache_prefix }}-npm-lockfile-

    - run: npm clean-install --ignore-scripts --no-audit
      if: contains(inputs.lockfile-path, 'package') && steps.cache-npm-lockfile.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
